import { useEffect } from "react";
import { useExploitAgentIdQuery, useExploitAgentStepsQuery } from "../queries/useExploitAgentQueries";
import { useExploitStore } from "../store/exploitStore";
import type { EngagementSlice } from "../store/exploitStore";
import type { ExploitAgentData } from "../store/exploitStore";
import type { AgentOut } from "../../../api/agent/types";

export function ExploitDataBridge({ engagementId }: { engagementId?: string }) {
  const setEngagementId = useExploitStore((s: EngagementSlice) => s.setEngagementId);
  const reset = useExploitStore((s: EngagementSlice) => s.reset);
  const setAgentsPhase = useExploitStore((s: EngagementSlice) => s.setAgentsPhase);
  const upsertExploitAgents = useExploitStore((s: EngagementSlice) => s.upsertExploitAgents);
  const setStepsPhase = useExploitStore((s: EngagementSlice) => s.setStepsPhase);
  const upsertStepsBatch = useExploitStore((s: EngagementSlice) => s.upsertStepsBatch);
  const setStepsError = useExploitStore((s: EngagementSlice) => s.setStepsError);

  useEffect(() => {
    reset();
    setEngagementId(engagementId);
  }, [engagementId, reset, setEngagementId]);

  const agentsQ = useExploitAgentIdQuery(engagementId, {
    findIntervalMs: 2000,
    afterFoundIntervalMs: 30000,
    keepWatching: true
  });

  const stepsQ = useExploitAgentStepsQuery(agentsQ.data, {
    intervalMs: 2000
  });

  // Reflect agents query into store
  useEffect(() => {
    if (agentsQ.isPending) setAgentsPhase("loading");
    if (agentsQ.isError) setAgentsPhase("error");
    if (agentsQ.isSuccess) {
      upsertExploitAgents((agentsQ.data as unknown as AgentOut[]) || []);
      setAgentsPhase("success");
    }
  }, [agentsQ.isPending, agentsQ.isError, agentsQ.isSuccess, agentsQ.data, setAgentsPhase, upsertExploitAgents]);

  // Reflect steps query into store
  useEffect(() => {
    if (stepsQ.isPending) setStepsPhase("loading");
    if (stepsQ.isError) {
      setStepsPhase("error");
      setStepsError(stepsQ.error);
    }
    if (stepsQ.isSuccess) {
      upsertStepsBatch((stepsQ.data as unknown as ExploitAgentData[]) || []);
      setStepsError(undefined);
      setStepsPhase("success");
    }
  }, [stepsQ.isPending, stepsQ.isError, stepsQ.isSuccess, stepsQ.data, stepsQ.error, setStepsPhase, setStepsError, upsertStepsBatch]);

  return null;
}


